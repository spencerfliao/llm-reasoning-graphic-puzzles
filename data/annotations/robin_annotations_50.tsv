Filename	Reflections	Pixel/Object Changes	Helper Functions	Program Instructions
447fd412.png	The task involves enlarging a pattern and copying to several specified locations. The size of the isolated '2' object indicates how many times is the '1' pattern enlarged. A single pattern can occupy multiple isolated '1' objects. The size of the grid and the color of the objects remain the same.	Depending on how many '2' the object with '1' contains, objects of isolated '2' can be merged together with object of '1'. The color of the copied object remains the same.	get_objects can be used to get all the objects. enlarge_object can be used to resize the '1' object.	1 Get all objects using the get_objects function. 2. Group isolated '2' objects together if are a single pattern copying destination. 3. For each destination: calculate the multiplication factor for each destination, enlarge the pattern using enlarge_object, and put the pattern at the suitable location such that the '1' position matches. 
44d8ac46.png	The task involves identifying objects that contain a square hole, and filling '2' inside the hole. Objects that contains non-square holes, such as rectangles, are left the same.	There are no creation or destruction of objects. The objects maintain their shape but those that contain a square hole are filled with pixel value of '2'. 	get_objects can be used to obtain all the objects. fill_rect can be used to fill in the square holes.	1. Get all objects using the get_objects function. 2. For each object, check if the shape of its hole is a square. 3. Fill square holes with '2'. Keep non-square holes the same.   
44f52bb0.png	The task involves identify 3x3 patterns that are vertically mirrored. A single 1x1 pixel on a 1x1 grid that indicates the boolean relationship is returned.	There are no movement of individial pixels. Instead a single 1x1 pixel is returned. If the input grid is vertically mirrored, the color is '1' otherwise it is '7'. 	empty_grid can be used to obtain a 1x1 empty grid. vertical_flip can be used to check if the input grid can be vertically mirrored. fill_value can be used to fill in the appropriate color into the 1x1 output grid.	1. Create a 1x1 output grid. 2. Check if vertically flipping the input grid gives the same grid. 3. If it is true, fill in '1' to the output grid. Fill in '7' otherwise.
4522001f.png	The task involves identifiy which corner is the object located on a 3x3 grid. The output would be a 9x9 grid that contains two diagonally touching 4x4 square of value '3'. The position of the 2 squares depends on the object touching corner in the input grid, with one of the square corner touching the same corner as the input, and the other square touching the opposite corner of the previous square.	The input grid is discarded. A 9x9 grid with 2 4x4 squares of value '3' is returned. The position of the squares is dependent of the input grid.	get_objects can be used to obtain the location of the object in the input grid. empty grid can be used to create a 9x9 grid. fill_between_coords can be used to create the 2 4x4 squares.	1. Check which grid corner the input object is touching. 2. Create a 9x9 output grid. 3. Fill a 4x4 square of value '3' at the same corner using fill_between_coords. 4. Fill another 4x4 square of value '3' that is touching the opposite corner of the previous square. The squares should touching diagonally only by the corners.
46442a0e.png	The task involves returning a grid that is 2 times larger in width and height that contains rotated versions of the original pattern. The input grid is copied and rotated 4 times, placed at each corner of the output grid. The top left, top right, bottom right, bottom left pattern are rotated clockwise 0 degrees, 90 degrees, 180 degrees and 20 degrees respectively.	Each color pixel in the input grid is copied and rotated 4 times to the output grid. The rotation transformation for each position would be that the top left, top right, bottom right, bottom left pattern are rotated clockwise 0 degrees, 90 degrees, 180 degrees and 20 degrees respectively.	empty_grid can be used to initialize a output grid that is double in width and height of the input grid. rotate_clockwise can be used to rotate the input grid.  fill_object can be used to fill grid with object.	1. Create a output grid that is double in width and height of the input grid. 2. Fill each corner with a rotated version of the input grid. The rotation for each corner being the top left, top right, bottom right, bottom left pattern are rotated clockwise 0 degrees, 90 degrees, 180 degrees and 20 degrees respectively.
469497ad.png	The task involves scaling the input grid by the number of colors on the borders of the bottom right. There are additional diagonal lines of value '2' extending from the corners of the square object to the colored border pixels.	The entire grid is enlarged. There are additional diagonal lines of value '2' extending from the corners of the square object to the colored border pixels.	enlarge_grid can be used to enlarge the entire grid.	1. Count the number of colors at the bottom and right border. 2. Enlarge the entire grid by the number of colors counted using enlarge_grid. 3. Fill diagonal lines of value '2' using fill_between_coords from each corner of the square object to the colored border pixels.
46f33fce.png	The task involves scaling the entire input grid twice and then also each object twice. The object scaling center is on the bottom right.	The entire grid is twice larger than the input grid. Each object is 4 times larger than the original. The color and shape of the object remains the same. The bottom right of each object is at the same fractional position from the input grid.	enlarge_grid can be used to enlarge the entire grid. enlarge_object can be used to enlarge the objects. get_objects can be used to obtain all objects.	1. Enlarge the input grid twice. 2. Get all objects using get_objects. 3. Loop over each object and scale them twice with the scaling center at the bottom right.
47c1f68c.png	An object is mirrored 4 times along a cross shaped object. The cross shaped object is removed, resulting in a grid that is 1 pixel smaller in both width and height. The objects in the output grid are all transformed into the color of the removed cross shaped object.	Each color pixel of an object is mirrored along the object in a cross shape vertically and horizontally,. The cross is removed, resulting in a grid that is 1 pixel smaller in both width and height. The color of the resulting pixels changes to the color of the removed cross.	get_objects can be used to obtain the objects. empty_grid can be used to obtain a smaller grid. change_object_color can change the color of the 4 output objects. horizontal_flip and vertical_flip can be used to filp the object. 	1. Obtain all the objects. 2. Identify the non cross shaped object. 3. MIrror it along the vertical line of the cross object. 4. Mirror the two objects along the horizontal line of the cross object. 5. Remove the cross object, resulting in a grid that is 1 pixel smaller in both width and height. 6. Change the color of the resulting objects to the color of the removed cross object. 
484b58aa.png	This task is a denoising task. The input grid features a underlying repeating lattice pattern with some part of the grid removed. The goal is to recover the missing pixels and obtain a perfect lattice.	Most of the pixels remain the same. The empty pixels are filled with the appropriate values such that the image becomes a repeating lattice pattern. There are no empty pixels left.	crop_grid can be used to extract the repeating grid patttern.	1. Loop through all possible rectangular subgrids until a repeating pattern is found. 2. Extract that pattern using crop_grid. 3. Fill the missing pixels using the extracted pattern
48d8fb45.png	This task involves identifying an object that is marked by a pixel of '5' on top. 	The output grid contains only the object that has a pixel of '5' on top. The pixel of '5' is not returned. The color and shape of the object remains the same.	get_objects can be used to obtain the objects. get_object_color can be used to identify the '5' pixel object.	1. Get all objects using get_objects. 2. Identify the position of the '5' pixel object. 3. Identify the object that is directly below and touching the '5' pixel. 4. Return a grid that contains only the object.
4938f0c2.png	This task involves contructing a symmetrical pattern around a central pixel using the given pattern.	There are 3 new objects that are flipped versions of the object with the value '2' around the value of '3'. The new pattern has a vertical and horizontal symmtery along the '3' pixel.	get_objects can be used to obtain the '2' value object. get_object_color can be used to identify the color of the object. horizontal_flip and vertical_flip can be used to obtain mirror images of the original pattern. 	1. Obtain the pattern using get_objects. 2. Obtain 3 flipped versions of the pattern using horizontal_flip and vertical_flip. 3. Fill the flipped patterns at the appropriate location.
496994bd.png	This task involves constructing a version of the input grid that can be mirrored along the horizontal axis.	There are 1 new object at the lower section of the grid. The new object is a vertically flipped version of the object on the top.	get_objects can be used to obtain the object on the top. vertical_flip can be used to obtain the mirrored object.	1. Obtain the object on the top using get_objects. 2. Obtain a flipped version of the object using vertical_flip. 3. Fill the flipped object at the lower section of the grid.
49d1d64f.png	The task involves extending the grid in all 4 directions by 1 pixel according to the colors of the input grid. 	The grid is one pixel larger in all 4 directions. The pixels of the original grid is extended to the border if it is touching a  empty border pixel. The pixels at the 4 corners remain empty. 	empty_grid can be used to obtain a grid that is 2 pixels larger in both height and width. fill_value can be used to extend the colors from the original grid.	1. Obtain a grid that is 2 pixels larger in both height and width using empty_grid. 2. Fill the original grid about the center of the output grid. 3. For each pixel at the outer part of the original grid, extend the same color to the border using fill_value.
4be741c5.png	This task is a denoising task. The output grid are the unique colors extracted in order, horizontally or vertically. 	The size of the output grid are the number of unique colors in the input grid. It is vertical or horizontal, depending on which direction the color varies in the input grid. The color of the pixels in the output are the unique colors extracted in order from the input grid.	empty_grid can be used to obtain the output grid. fill_value can be used to fill the unique colors to the output grid.	1. Check if the colors are varying horizontally or vertically by getting a slice of the input grid at the border and check if they are all the same colors. 2. Count the number of unqiue colors. 3. Create an empty grid according to the previous informations using empty_grid. 4. Fill in the unique colors according to the order of the varying colors.
4c4377d9.png	This task involves doubling the size of the input grid with a horizontally mirrored version of the input grid.	The height of the input grid is doubled. The lower half of the output grid is the horizontally mirrored version of the input grid.	empty_grid can be used to obtain the output grid with twice the height of the input grid. horizontal_flip can be used to obtain a mirrored image of the input grid. 	1. Obtain the output grid with a height twice of the input grid with empty_grid. 2. Fill in the lower half of the output grid with a horizontally flipped version of the input grid.
4c5c2cf0.png	This task involves contructing a symmetrical pattern around a central pattern.	There are 3 new objects that are flipped versions of an object around an object of a flower pattern with a different color. The new pattern has a vertical and horizontal symmtery along central flower object.	get_objects can be used to obtain the '2' value object. horizontal_flip and vertical_flip can be used to obtain mirror images of the original pattern. 	1. Obtain all objects using get_objects. 2. Identify the pattern that has to be flipped horizontally and vertically. 3. Obtain 3 flipped versions of the pattern using horizontal_flip and vertical_flip. 4. Fill the flipped patterns at the appropriate location.
508bd3b6.png	This task involves extrapolating a pattern that describes a ball bouncing off a wall.	Two new lines of the value '3' are filled. One of the lines is a linear extrapolation of the '8' line to the '2' wall. The other one is a reflected line off the '2' wall. 	get_objects can be used to identify the '2' wall and the '8' line. fill_between_coords can be used to draw the two '3' lines.	1. Obtain all objects using get_objects. 2. Identify the starting and ending position of the extrapolation '3' line, from the end of the '8' line to the '2' wall. 3. Fill in the extrapolation line using fill_between_coords. 4. Identify the starting and ending position of the reflected '3' line, from the end of the newly added line to the grid border. 5. Fill in the reflected line using fill_between_coords.
50cb2852.png	This task involves filling in the interior of each rectangular object with the value '8'.	The size of the grid remains the same. For each object, the interior, which are the region that is not the border of the object, are filled with a rectangle of value '8'.	get_objects can be used to obtain all objects. fill_rect can be used to fill the interior each object with a '8' rectangle.	1. Obtain all objects using get_objects. 2. For each object, identify the interior region of each object. 3. Fill the interior of each object with a rectangle of value '8' using fill_rect.
5117e062.png	This task involves identifying an object that is marked by a pixel of '8' about the center of the object. 	The output grid is a tight fit that contains only the object that is marked with a '8' pixel at the center. The '8' pixel is converted to the color of the object.	get_objects can be used to obtain the objects. empty_grid can be used to construct the output grid with a size just enough to contain the output object.	1. Get all objects using get_objects. 2. Identify the object that is marked by a '8' pixel. 3. Construct the output grid with empty_grid, with a size just enough to contain the identified object. 4. Fill the identify object into the output grid. 5. Convert the '8' pixel to the color of the object. 
5168d44c.png	This task involves shifting a box along a dotted line to the next dot.	The input grid is transformed to the output by shifting a '2' box along a dotted '3' line to the next dot to the right or to the bottom. 	get_objects can be used to obtain the '2' box or the '3' line. get_object_color can be used to identify if the object is the box or the line. 	1, Get all object using get_objects. 2. Identify the box and the dotted line using get_object_color. 3. Identify if the line if oriented horizontally or vertically. 4. Shift the position of the box according to the orientation of the line.
539a4f51.png	This task create layers of repeating colors along the diagonal line to the bottom right.	The output grid is double in both width and height of the input grid. The empty pixels are layered with colors of the grid along the diagonal line from the top left to the bottom right. The empty pixels from the input grid are not choosen as the color for layering, but instead the pattern repeats again.	fill_row and fill_col can be used to layer the colors. empty_grid can be used to create a output grid that is double in both width and height of the input grid.	1. Create a output grid that is that is double in both width and height of the input grid using empty_grid. 2. Copy the input grid to the same location of the output grid. 3. For each layer along the diagonal line that is not filled, fill in a single layer colors using the colors from the top left corner, then iterate to the next color along a diagonal line from the top left corner to the bottom right, and fill in the next layer.
543a7ed5.png	This task involves filling the holes and also drawing an outer border for each object.	The '8' hole of each object is filled with '4'. Each object is also wrapped with a layer of '3'.	get_objects can be used to get all objects. fill_rect can be used to fill the holes of objects with '4'. fill_col and fill_row can be used to draw a border of '3' for each object.	1. Get all objects using get_objects. 2. Identify the hole of '8' for each rectangular object. 3. Fill in the hole with '4' using fill_rect. 4. Identify the border of each object. 5. Wrap each object with a border of '3' using fill_col and fill_row.
54d82841.png	This task involves identifying the position of holes for each object.	Each object from the input remains the same. There is an extra '4' pixel object at the bottom of the grid for each object. The new pixels are directly under the concave hole of each object.	get_objects can be used to get all objects. fill_value can be used to draw the new pixels.	1. Get all objects using get_objects. 2. Identify horizontal position of the concave hole for each object. 3. For each object, draw a new pixel at the bottom of the grid and horizontally at coordinate of the hole.
54d9e175.png	This task involves filling each region of the input grid with a color uniquely mapped to the color of the pixel at the center.	Each region that is separated by the '5' grid is filled with a new color. This color is uniquely mapped to the color at the center of each region. The pairs are '1' -> '6', '2' -> 7, '3' -> '8', '4' -> '9'	fill_rect can be used to fill the colors of each region.	1. For each region, identify the color at the center. 2. Identify the new color for each region. 3. Fill each region with the new color using fill_rect.
5521c0d9.png	This task involves raising each object on the top of the position in the input.	Each object is raised to a new height. The new height depends on the top of the object in the input. The bottom of the object at the new position should be just on top of the top of the old position.	get_objects can be used to get all objects.	1. Get all objects using get_objects. 2. Identify the top position of each object. 3. Calculate the new top position of each object such that the bottom of the new object would just be on top of the top of the old object. 4. Change the top of the new object to the new top position.
5582e5ca.png	This task involves filling the grid with the most common color in the input grid.	The color of the entire grid is filled with a single color. The new color would be the most common color in the input grid.	get_pixel_coords can be used to identify the most common color. fill_rect can be used to fill the entire grid with the most common color.	1. Identify the most common color using get_pixel_coords. 2. Fill the entire grid with the most common color using fill_rect.
5614dbcf.png	This task is a denoising task that involves extracting the color of blocks and shrinking it to a simplified grid.	The new grid is 3 times smaller in both width and height of the input grid. Each pixel of the grid corresponds to the color of a 3x3 region in the input grid that is not '5'. 	empty_grid can be used to create a new grid that is 3 times smaller in both width and height. fill_value can be used to fill each pixel of the output grid with the appropriate color.	1. Create an empty grid hat is 3 times smaller in both width and height using empty_grid. 2. For each pixel in the output grid, identify the color that correponds to the 3x3 block of the input. 3. Fill in each pixel with the corresponding color using fill_value.
56dc2b01.png	This task involves positioning a pattern to a line and sandwiching it with a new line.	The object of '3' is moved to the closet position where it is touching the '2' line. A new '8' line is added to the opposite side of the object such that the '3' object is sandwiched between the two lines.	get_objects can be used to get the '3' item and the '2' line. fill_between_coords can be used to draw the new '8' line.	1. Get all objects using get_objects. 2. Identify the location of the '2' line and calculate the new position of the '3' object. 3. Move the '3' object to the new position. 4. Calculate the position of the new '8' line such that the '3' object will be sandwiched. 5. Draw the new line using fill_between_coords
56ff96f3.png	This task involves drawing a rectangle that covers two pixels of the same color in the input.	A rectangle is drawn for each pair of pixels of the same color. The opposite corners of the rectangle is located at the pair of pixels from the input grid. 	get_objects can be used to get the pixels. fill_rect can be used to draw the rectangle.	1. Get all objects using get_objects. 2. Identify pairs of same color pixels. 3. Calculate the position of the top left and bottom right of the rectangle. 4. Fill a rectangle using the calculated positions with fill_rect.
57aa92db.png	This task involves generalizing patterns to different size, scale and position.	There is one unique multicolored object that is not rectangular. That pattern is copied, scaled and recolored such that it can be overlayed on the other rectangular object. The object will not be rotated. The positon and scale of the pattern can be identifed by an anchor block of the same color that all objects have.	get_objects can be used to get all objects. enlarge_object can be used to resize the object. change_object_color can be used to match the color of the rectangular object.	1. Get all objects using get_objects. 2. Identify the anchor block, which is a block of same color that all objects have. 3. Identify the enlargement factor and color for each copy destination. 4. Enlarge the object using enlarge_object, and also change the color using change_object_color. 5. Place the new object at the suitable location.
5ad4f10b.png	This is a denoising task that involves identifying the color of the noise and also the object without the noise.	There is one large object of unique color with noise of another color scattered. The output grid contains the large object scaled down to the smallest possible size, and with the color replaced with the color of the noise.	get_objects can be used to get the large object and also the noise. empty_grid can be used to create the output grid of the size of the output object. change_object_color can be used to change the color of the output object to the color of the noise.	1. Get all objects using get_objects. 2. Identify the large object, and the color of the noise. 3. Calculate the smallest possible size the large object can shrink to. 4. Shrink the large object. 5. Replace the color of the object to the color of the noise using change_object_color. 6. Create an empty_grid that can just contain the output object using empty_grid. 7. Place the output object into the output grid.
5bd6f4ac.png	This task involves extracting the top right 3x3 pixels of the input grid.	The output is a 3x3 grid. The grid contains the top right 3x3 pixels of the input grid.	crop_grid can be used to get the top right 3x3 pixels of the input grid.	1. Use crop_grid to get the top right 3x3 pixels of the input grid. 2. Return that cropped grid as the output
5c0a986e.png	This task involves drawing a diagonal line from each of the objects to the border in specific directions.	Two extra diagonal lines are drawn from each of the object's corner.  For the '1' square object, a diagonal '1' line extends from the top left corner of the object in the top left direction to the border of the grid.  For the '2' square object, a diagonal '2' line extends from the bottom right corner of the object in the bottom right direction to the border of the grid. 	get_objects can be used to get both objects. get_object_color can be used to identify the color of the object. fill_between_coords can be used to draw the two new lines.	1. Use get_objects to get both objects. 2. Identify the object of the color using get_object_color. 3. For each object, calculate the starting point and ending point of the new line according to the color of the object. 4. For each line, draw the line using fill_between_coords.
5c2c9af4.png	This task involves drawing concentric squares according to the position and spacing of 3 pixels.	Multiple new concentric squares are drawn. The squares are centered on the middle pixel of the three pixels. The opposite corners of the smallest square lie on the other two pixels. The length of the other square are integer multiples of the length of the smallest square. Squares of different length are draw until no sides of the square can fit inside the grid. The squares have the same color as the pixels.	get_objects can be used to get the 3 pixels. fill_row and fill_col can be used to draw the concentric squares.	1. Use get_objects to get the three pixels.2. Identify the middle pixel. 3. Identify the length of the smallest square. 4. Draw the smallest square using fill_row and fill_col. 5. Calculate the position of the sides of the squares as integer multiples of the length of the smallest square. 6. Draw the larger concentric squares using fill_row and fill_col, until no sides of the square can be fit.
5daaa586.png	This task involves cropping the center rectangular part of the grid, and also connecting pixels in the center region to the side of the same color.	The input grid is cropped such that only the center rectangular region remains. The pixel in that region are extended to the side of the same color with a line of the same color.	crop_grid can be used to obtain the center rectangular region of the input grid. get_objects can be used to obtain all the individual pixels in the center region. fill_between_coords can be used to draw the line that extends the pixels.	1. Use crop_grid to get the center rectangular region. 2. Use get_objects to obtain all individual pixels in the center region. 3. Identify the side with the same color of the pixels. 4. For each pixel, use fill_between_coords to fill the region between the pixels and the side of the same color.
60b61512.png	The task involves completing the square for each object.	Each object is filled with extra pixels such that the object becomes a 3x3 square. Pixels of the value '7' is used to fill in the missing pixels.	get_objects can be used to get all the objects. fill_value can be used to fill the missing spaces with pixels of value '7'.	1. Use get_objects to get all the objects. 2. For each object, identify the potential position such that it can be filled as a square. 3. For each pixel of the potential positions, if the pixel is empty, fill a value of '7' with fill_value.
6150a2bd.png	The task involves rotating the input grid by 180 degrees.	The pixels are the 180 degree rotated version of the input grid.	rotate_clockwise can be used to rotate the grid by 180 degrees.	1. Use rotate_clockwise to rotate the input grid by 180 degrees.
623ea044.png	The task involves drawing two diagonal lines such that the two lines meet at the pixel.	Two new diagonal lines with the same color as the pixel are drawn. The two lines meet at the position of the pixel.	get_pixel_coords can be used to locate the position and color of the single pixel. fill_between_coords can be used to draw the two new lines.	1. Use get_pixel_coords to get the position and color of the pixel. 2. Calculate the starting and ending points of the two lines such that the two lines meet at the pixel. 3. Use fill_between_coords to draw the two lines.
62c24649.png	The task involves mirroring the input grid horizontally and vertically such that the output grid is symmetric.	The output grid is doubled in width and height of the input grid. The pattern of the input grid are mirrored such that the output grid is vertically and horizontally symmetric.	horizontal_flip and vertical_flip can be used to generate the mirrored image. empty_grid can be used to create the output grid.	1. Use empty_grid to create the output grid that is doubled in width and height of the input grid. 2. Use horizontal_flip to generate a flipped pattern of the input. 3. Place the flipped pattern on the right of the original pattern. 4. Flip the resulting pattern again using vertical_flip. 5. Place the flipped pattern under the previous pattern.
63613498.png	The task involves identifying an object of the same shape and recoloring it.	The output grid is very similar to the input but one object recolored. The object on the top left corner surrounded by '5' is the query. Another object of the same shape, not necessarily the same color, is recolored as '5'.  	get_objects can be used to get all the objects. change_object_color can be used to change the color of the matched object.	1. Use get_objects to get all the objects. 2. Identify the query object on the top left corner. 3. Loop through all other object and check if the object has the same shape as the query object. 4. Recolor objects that match as '5' using change_object_color.
6430c8c4.png	The task involves identifying pixels that are missing at the same location in two objects.	The size of the output grid is the square of the top half for the input grid. The pixels of the output grid depends on the two object in the input grid. If a pixel is missing at the same position for both objects, the pixel of the same position at the output grid is colored as '3'.	get_objects can be used to get the two objects. combine_object can be used to check for common missing pixels. empty_grid can be used to create the output grid. fill_value can be used to fill the pixels of the output grid.	1. Use get_objects to get the two objects. 2. Create the output grid using empty_grid. 3. Use combine_objects to overlay the two objects. 4. For each pixel of the output grid, if the pixel of the same location is missing at the combined object, use fill_value to fill the pixel at the output with '3'.
6455b5f5.png	This task involves identifying the rectangle with the largest and smallest area, and filling them with specific colors.	The input grid is divided into many rectangles. The rectangle with the largest area is filled with '1', and the rectangle with the smallest area is filled with '8'.	fill_rect can be used to fill the colors of the rectangles with the largest and smallest area.	1. Identify each rectangle. 2. Calculate the area of each rectangle. 3. Identify the rectangles with the largest and smallest area. 4. Fill in the color of the rectangle with the largest area with '1', and the smallest with '8', using fill_rect.
67385a82.png	This task involves identifying pixels that are connected to other pixels in 4 directions.	Pixels that are neighbouring other pixels in the top, bottom, left, right position are recolored to '8'.	fill_value can be used to recolor the pixels.	1. For each pixel, check if there is another pixel at the top, bottom, left and right of it. 2. If the condition is true, color the pixel with fill_value.
673ef223.png	The task involves extending pixels to a line and also copying a similar pattern to another location	A line is draw from each '8' pixel to the red line at the same horizontal level. The '8' pixel is recolored to a '4'. For the other red line, horizontal lines of '8' to the grid border are drawn at the same relative position of the previous red line.	get_objects can be used to obtain all '8' pixels and also the red lines. fill_row can be used to draw the horizontal '8' lines. fill_value can be used to recolor the original '8' pixels.	1. Use get_objects to get all '8' pixels. 2. Identify the direction of the red line at the same horizontal level of the '8' pixels. 3. For each '8' pixel, draw a '8' line from the pixels to the red line. 4. Recolor the original '8' pixels to '4'. 5. For each original '8' pixel, draw another '8' line at the same relative vertical position at other red line that extends to the grid border horizontally. 
6773b310.png	This task involves counting the number of pixels in each region and identifying those that have 2 pixels.	A 3x3 grid with some '1' pixels is returned. The input grid can be divided into 9 sections equally. Each section contain several '6' pixels. If the number of pixels in that section is two, fill in the correponding pixel at the output grid as '1'. 	empty_grid can be used to create the 3x3 grid. fill_value can be used to fill '2's at the output grid.	1. Use empty_grid to create a 3x3 output grid. 2. Partition the input grid into 9 sections. 3. For each section, count the number of '6' pixels. 4. If the number of pixels is 2, fill in the correponding pixel at the output grid as '1'.
67a3c6ac.png	The task involves horizontally flipping the input grid.	The output grid is the horizontally flipped version of the input grid.	horizontal_flip can be used to obtain the output grid.	1. Use horizontal_flip on the input grid to obtain the output grid.
67a423a3.png	The task involves identifying the location where two lines meet, and drawing a square at that position.	A '4' square of length 3 is drawn at the position where two lines meet.	fill_row and fill_col can be used to draw the '4' square.	1. Identify the position where two lines meet, i.e. where a pixel is surrounded by 4 other pixels. 2. Draw a '4' square of length 3 around it using fill_row and fill_col.
67e8384a.png	The task involves mirroring the input grid horizontally and vertically such that the output grid is symmetric.	The output grid is doubled in width and height of the input grid. The pattern of the input grid are mirrored such that the output grid is vertically and horizontally symmetric.	horizontal_flip and vertical_flip can be used to generate the mirrored image. empty_grid can be used to create the output grid.	1. Use empty_grid to create the output grid that is doubled in width and height of the input grid. 2. Use horizontal_flip to generate a flipped pattern of the input. 3. Place the flipped pattern on the right of the original pattern. 4. Flip the resulting pattern again using vertical_flip. 5. Place the flipped pattern under the previous pattern.
681b3aeb.png	The task involves completing a square using the two shapes provided.	A 3x3 grid is that contains the two object from the input is returned. The two objects has to fit together perfectly such that is becomes a 3x3 square.	get_objects can be used to obtain the two objects. empty_grid can be used to obtain the 3x3 grid. fill_object can be used to fill the grid with the object.	1. Use get_objects to get the two objects. 2. Use empty grid to create the 3x3 output grid. 3. Figure out the possible solution to fit the 2 objects together to obtain a perfect 3x3 square. 4. Use fill_object to fill the objects to the grid using the found solution.
68b16354.png	The task involves vertically flipping the input grid.	The output grid is the vertically flipped version of the input grid.	vertical_flip can be used to obtain the output grid.	1. Use vertical_flip on the input grid to obtain the output grid.